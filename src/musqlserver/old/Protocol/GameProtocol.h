#ifndef _GAMEPROTOCOL_H
#define _GAMEPROTOCOL_H

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "StdAfx.h"
#include "ProtocolStructs.h"

#define MAX_CHAT_LEN 90

struct CSP_ANS_GUILDREGINFO;
struct CSP_ANS_GUILDREGMARK;
struct PMSG_ACTION;
struct PMSG_ACTIONRESULT;
struct PMSG_ADDON_REQUEST;
struct PMSG_ADDSTATS_RESULT;
struct PMSG_ADDSTATS;
struct PMSG_AGILITYSEND;
struct PMSG_AHINFO;
struct PMSG_ALTERPSHOPVAULT;
struct PMSG_ANTIHACK_BREACH;
struct PMSG_ANTIHACK_CHECK;
struct PMSG_ATTACK;
struct PMSG_ATTACKRESULT;
struct PMSG_ATTACKSPEEDSEND;
struct PMSG_BEATTACK_COUNT;
struct PMSG_BEATTACK;
struct PMSG_BLOCKCHAT_LIST;
struct PMSG_BUYREQUEST;
struct PMSG_BUYRESULT;
struct PMSG_CALLMONSTER_VIEWPORTCREATE;
struct PMSG_CCF_UI_ONOFF;
struct PMSG_CHAIN_MAGIC_OBJECT;
struct PMSG_CHAIN_MAGIC;
struct PMSG_CHAOSMIX;
struct PMSG_CHARCHECK_RESULT;
struct PMSG_CHARCHECK;
struct PMSG_CHARCREATE;
struct PMSG_CHARCREATERESULT;
struct PMSG_CHARDELETE;
struct PMSG_CHARLIST;
struct PMSG_CHARLISTCOUNT;
struct PMSG_CHARMAPJOIN;
struct PMSG_CHATDATA_NUMBER;
struct PMSG_CHATDATA_WHISPER;
struct PMSG_CHATDATA;
struct PMSG_CHECK_MAINEXE_RESULT;
struct PMSG_CHECK_MAINEXE;
struct PMSG_CLIENTCLOSE;
struct PMSG_CLIENTMSG;
struct PMSG_CLIENTTIME;
struct PMSG_CSATTKGUILDLIST;
struct PMSG_DEL_PENTAGRAMJEWEL;
struct PMSG_DEL_PSHOPITEM;
struct PMSG_DISABLE_RECONNECT;
struct PMSG_DSF_PLAY_STATE;
struct PMSG_DSF_RESULT;
struct PMSG_DSF_STATE;
struct PMSG_DSF_TEAM_USERNAME;
struct PMSG_DURATION_MAGIC_RECV;
struct PMSG_DURATION_MAGIC_SEND;
struct PMSG_ELEMENTALDAMAGE;
struct PMSG_ENTER_ZONE_RESULT;
struct PMSG_EQUIPMENTLIST;
struct PMSG_EVENT_INVEN_ITEM_MOD;
struct PMSG_EVENT;
struct PMSG_EVENTENTRY_NOTICE;
struct PMSG_EVENTINVENTORY_DELETE;
struct PMSG_EVENTITEM_DUR;
struct PMSG_EVENTITEM_GETREQUEST;
struct PMSG_EVENTITEM_GETRESULT;
struct PMSG_EVENTITEM_THROW_RESULT;
struct PMSG_EVENTITEM_THROW;
struct PMSG_EX_GAMESERVER_MOVE_RESULT;
struct PMSG_EX_GAMESERVER_MOVE_SEND;
struct PMSG_EX_SKILL_COUNT;
struct PMSG_EXCHANGE_EVENTCHIP;
struct PMSG_GETMUTONUMBER;
struct PMSG_GOALSEND;
struct PMSG_GUILD_ASSIGN_STATUS_REQ;
struct PMSG_GUILD_ASSIGN_STATUS_RESULT;
struct PMSG_GUILD_ASSIGN_TYPE_REQ;
struct PMSG_GUILD_ASSIGN_TYPE_RESULT;
struct PMSG_GUILDCREATED_RESULT;
struct PMSG_GUILDDELUSER;
struct PMSG_GUILDINFOSAVE;
struct PMSG_GUILDJOINQ;
struct PMSG_GUILDMASTERANSWER;
struct PMSG_GUILDQRESULT;
struct PMSG_GUILDVIEWPORT_USER;
struct PMSG_GUILDVIEWPORT;
struct PMSG_GUILDWARSEND_RESULT;
struct PMSG_HELLO;
struct PMSG_IDPASS;
struct PMSG_ILLUSION_TEMPLE_USE_MAGIC_RESULT;
struct PMSG_INSERT_PENTAGRAMJEWEL;
struct PMSG_INVENTORYITEMMODIFY;
struct PMSG_INVENTORYITEMMOVE_RESULT;
struct PMSG_INVENTORYITEMMOVE;
struct PMSG_INVENTORYLIST;
struct PMSG_INVENTORYLISTCOUNT;
struct PMSG_ITEMDURREPAIR;
struct PMSG_ITEMGETREQUEST;
struct PMSG_ITEMGETRESULT;
struct PMSG_ITEMTHROW_RESULT;
struct PMSG_ITEMTHROW;
struct PMSG_ITEMVIEWPORTCREATE;
struct PMSG_ITL_GUILD_RANKINFO;
struct PMSG_ITL_PLAY_STATE;
struct PMSG_ITL_RELICS_GET_USER;
struct PMSG_ITL_RESULT;
struct PMSG_ITL_SKILL_END;
struct PMSG_ITL_STATE;
struct PMSG_ITL_STONEINFO;
struct PMSG_ITL_USE_MAGIC_RESULT;
struct PMSG_ITL_USER_ADD_EXP;
struct PMSG_ITR_RESULT;
struct PMSG_ITR_USER_ADD_EXP;
struct PMSG_JOINRESULT;
struct PMSG_KICKOUT_UNIONMEMBER_REQ;
struct PMSG_KILLCOUNT;
struct PMSG_KILLPLAYER_EXT;
struct PMSG_LEVELUP;
struct PMSG_LOGINSEVER_LIVE;
struct PMSG_LUCKYITME_DB_INFO;
struct PMSG_LVPOINTADD;
struct PMSG_LVPOINTADDRESULT;
struct PMSG_MAGICATTACK_RESULT;
struct PMSG_MAGICATTACK;
struct PMSG_MAGICCANCEL;
struct PMSG_MAGICLIST;
struct PMSG_MAGICLISTCOUNT;
struct PMSG_MAPMOVE_CHECKSUM;
struct PMSG_MEMBER_POS_INFO_SEND;
struct PMSG_MONEY;
struct PMSG_MONSTER_VIEWPORTCREATE;
struct PMSG_MOVE_PSHOPITEM;
struct PMSG_MOVE;
struct PMSG_MUBOT_REQ_START;
struct PMSG_MUBOT_SETTINGS_RECV;
struct PMSG_MUBOT_USE;
struct PMSG_MUUN_ATTACK_COMMAND;
struct PMSG_MUUN_INVEN_ITEM_MOD;
struct PMSG_MUUN_INVEN_SUB_EQUIP_OPEN;
struct PMSG_MUUN_ITEM_SELLREQUEST;
struct PMSG_MUUN_ITEM_SELLRESULT;
struct PMSG_MUUN_RIDE_SELECT;
struct PMSG_MUUNITEM_CONDITION_STATUS;
struct PMSG_MUUNITEM_DUR;
struct PMSG_MUUNITEM_GETREQUEST;
struct PMSG_MUUNITEM_GETRESULT;
struct PMSG_NOTIFY_MAXUSER;
struct PMSG_NOTIFY_OBJECT_CREATION_STATE;
struct PMSG_NOTIFY_ZONE_CLEAR;
struct PMSG_NOTIFY_ZONE_TIME;
struct PMSG_OBJECT_LIFE_INFO;
struct PMSG_PACKETCHECKSUM;
struct PMSG_PARTYDELUSER;
struct PMSG_PARTYLIST;
struct PMSG_PARTYLISTCOUNT;
struct PMSG_PARTYREQUEST;
struct PMSG_PARTYREQUESTRESULT;
struct PMSG_PENTAGRAM_JEWEL_INOUT;
struct PMSG_PENTAGRAMJEWEL_INFO;
struct PMSG_PETINVENTORY_DELETE;
struct PMSG_PING_RESULT;
struct PMSG_PKLEVEL;
struct PMSG_POSISTION_SET;
struct PMSG_POST_DATA;
struct PMSG_PRICE_INFO;
struct PMSG_PRICE_ITEM_LIST;
struct PMSG_PROPERTYITEMCOUNT;
struct PMSG_PROPERTYITEMINFO;
struct PMSG_RAGE_ATTACK_RANGE_ANS;
struct PMSG_RAGE_ATTACK_RANGE;
struct PMSG_RAGEATTACK_REQ;
struct PMSG_RAGEATTACK;
struct PMSG_RANKING_SET;
struct PMSG_RAREITEMPIRCESEND;
struct PMSG_RECALLMONLIFE;
struct PMSG_RECV_CHATDATA_WHISPER;
struct PMSG_RECV_DC_OTHER_CHANNEL;
struct PMSG_RECV_POSISTION_SET;
struct PMSG_RECV_TRAP;
struct PMSG_RECVMOVE;
struct PMSG_REGEVENTCHIP;
struct PMSG_RELATIONSHIP_JOIN_BREAKOFF_ANS;
struct PMSG_RELATIONSHIP_JOIN_BREAKOFF_REQ;
struct PMSG_REQ_2ANIV_SERIAL;
struct PMSG_REQ_2ANIV_SERIAL;
struct PMSG_REQ_2ANV_LOTTO_EVENT;
struct PMSG_REQ_ACCEPTENTER_ITR;
struct PMSG_REQ_ACCEPTMEMBER_PARTYMATCHING;
struct PMSG_REQ_ALLOW_JOIN_GUILDMATCHING;
struct PMSG_REQ_ALLOWLIST_GUILDMATCHING;
struct PMSG_REQ_ARCA_BATTLE_JOIN;
struct PMSG_REQ_BLOODCASTLE_ENTERCOUNT;
struct PMSG_REQ_BUY_PCPOINTSHOP;
struct PMSG_REQ_CANCEL_GUILDMATCHINGLIST;
struct PMSG_REQ_CANCEL_JOIN_PARTYMATCHING;
struct PMSG_REQ_CASTLESIEGESTATE;
struct PMSG_REQ_CCF_RANKING;
struct PMSG_REQ_CHAOS_MULTIMIX_CHECK;
struct PMSG_REQ_CL_ENTERCOUNT;
struct PMSG_REQ_CLASSDEF;
struct PMSG_REQ_CRCDATA;
struct PMSG_REQ_CRYWOLF_ALTAR_CONTRACT;
struct PMSG_REQ_CRYWOLF_BENEFIT_PLUS_CHAOSRATE;
struct PMSG_REQ_CRYWOLF_INFO;
struct PMSG_REQ_CSATTKGUILDLIST;
struct PMSG_REQ_CSCOMMAND;
struct PMSG_REQ_CSGATEOPERATE;
struct PMSG_REQ_CSHUNTZONEENTER;
struct PMSG_REQ_CSREGGUILDLIST;
struct PMSG_REQ_DELETE_STONES;
struct PMSG_REQ_DELETE_STONES;
struct PMSG_REQ_DEVILSQUARE_REMAINTIME;
struct PMSG_REQ_DSF_ACCEPTENTER;
struct PMSG_REQ_DSF_CAN_PARTY_ENTER;
struct PMSG_REQ_DSF_GET_REWARD;
struct PMSG_REQ_DSF_GO_FINAL_PARTY_INFO;
struct PMSG_REQ_DSF_GO_FINAL_PARTY;
struct PMSG_REQ_DSF_PARTYRANKRENEW;
struct PMSG_REQ_DUEL_EXIT;
struct PMSG_REQ_DUEL_INVITE;
struct PMSG_REQ_DUEL_JOINCNANNEL;
struct PMSG_REQ_DUEL_LEAVECNANNEL;
struct PMSG_REQ_END_DUEL;
struct PMSG_REQ_ENTER_DOPPELGANGER;
struct PMSG_REQ_ENTER_ITR;
struct PMSG_REQ_ENTER_KANTURU_BOSS_MAP;
struct PMSG_REQ_ENTER_ZONE;
struct PMSG_REQ_EVENTENTRY_INFO;
struct PMSG_REQ_EVOMON_MAXSCORE;
struct PMSG_REQ_GET_DSF_REWARD;
struct PMSG_REQ_GET_PARTYMATCHINGLIST;
struct PMSG_REQ_GET_REWARD;
struct PMSG_REQ_GET_UBF_REAL_NAME;
struct PMSG_REQ_GIVEUPCASTLESIEGE;
struct PMSG_REQ_GUILD_PERIODBUFF_DELETE;
struct PMSG_REQ_GUILD_PERIODBUFF_INSERT;
struct PMSG_REQ_GUILDMARK_OF_CASTLEOWNER;
struct PMSG_REQ_GUILDMATCHINGLIST;
struct PMSG_REQ_GUILDMATCHINGLISTSEARCHWORD;
struct PMSG_REQ_GUILDREGINFO;
struct PMSG_REQ_GUILDVIEWPORT;
struct PMSG_REQ_ILLUSIONTEMPLE_ENTERCOUNT;
struct PMSG_REQ_IN_PENTAGRAM_JEWEL;
struct PMSG_REQ_ITL_RELATE_RELICS;
struct PMSG_REQ_JEWEL_MIX;
struct PMSG_REQ_JEWEL_UNMIX;
struct PMSG_REQ_JOIN_GUILDMATCHING;
struct PMSG_REQ_KANTURU_STATE_INFO;
struct PMSG_REQ_LUCKYCOIN_REGISTER;
struct PMSG_REQ_LUCKYCOIN_TRADE;
struct PMSG_REQ_LUCKYCOIN;
struct PMSG_REQ_LUCKYITEM_DELETE;
struct PMSG_REQ_LUCKYITEM_INSERT_2ND;
struct PMSG_REQ_LUCKYITEM_INSERT;
struct PMSG_REQ_LUCKYITEM_SELECT;
struct PMSG_REQ_MAPMOVE;
struct PMSG_REQ_MAPSERVERAUTH;
struct PMSG_REQ_MAPSVRAUTH;
struct PMSG_REQ_MAPSVRMOVE;
struct PMSG_REQ_MASTERLEVEL_SKILL;
struct PMSG_REQ_MEMBERJOIN_PARTYMATCHINGLIST;
struct PMSG_REQ_MEMBERJOIN_STATELIST_PARTYMATCHING;
struct PMSG_REQ_MINETWINKLE_REWARD;
struct PMSG_REQ_MINETWINKLE;
struct PMSG_REQ_MINIMAPDATA;
struct PMSG_REQ_MONEYDRAWOUT;
struct PMSG_REQ_MOVE_OTHERSERVER;
struct PMSG_REQ_MOVE_TO_CASTLE_HUNTZONE;
struct PMSG_REQ_MOVEBLOODCASTLE;
struct PMSG_REQ_MOVECHAOSCASTLE;
struct PMSG_REQ_MOVEDEVILSQUARE;
struct PMSG_REQ_MOVEILLUSIONTEMPLE;
struct PMSG_REQ_MUUN_EXCHANGE;
struct PMSG_REQ_NPC_POSITION;
struct PMSG_REQ_NPCBUY;
struct PMSG_REQ_NPCDBLIST;
struct PMSG_REQ_NPCREPAIR;
struct PMSG_REQ_NPCUPGRADE;
struct PMSG_REQ_OPEN_PCPOINTSHOP;
struct PMSG_REQ_OUT_PENTAGRAM_JEWEL;
struct PMSG_REQ_PENTAGRAMJEWEL;
struct PMSG_REQ_PERIODBUFF_DELETE;
struct PMSG_REQ_PERIODBUFF_INSERT;
struct PMSG_REQ_PERIODBUFF_SELECT;
struct PMSG_REQ_PERIODITEMEX_DELETE;
struct PMSG_REQ_PERIODITEMEX_INSERT;
struct PMSG_REQ_PERIODITEMEX_SELECT;
struct PMSG_REQ_PSHOPITEMVALUE_INFO;
struct PMSG_REQ_QUESTEXP_INFO;
struct PMSG_REQ_REFINE_PENTAGRAM_JEWEL;
struct PMSG_REQ_REG_CC_OFFLINE_GIFT;
struct PMSG_REQ_REG_DL_OFFLINE_GIFT;
struct PMSG_REQ_REG_HT_OFFLINE_GIFT;
struct PMSG_REQ_REG_RINGGIFT;
struct PMSG_REQ_REG_WANTED_PARTYMEMBER;
struct PMSG_REQ_REGCASTLESIEGE;
struct PMSG_REQ_REGGUILDMARK;
struct PMSG_REQ_REGGUILDMATCHINGDATA;
struct PMSG_REQ_REGISTER_EVENTCHIP;
struct PMSG_REQ_REGISTER_LUCKYCOIN;
struct PMSG_REQ_REGISTER_STONES;
struct PMSG_REQ_REPOSUSER_IN_CC;
struct PMSG_REQ_REPOSUSER_IN_CCF;
struct PMSG_REQ_RESET_EVENTCHIP;
struct PMSG_REQ_RESET_EVENTCHIP;
struct PMSG_REQ_RUUD_STORE_BUYITEM;
struct PMSG_REQ_SANTACHECK;
struct PMSG_REQ_SANTAGIFT;
struct PMSG_REQ_SAVE_DSF_PARTYPOINT;
struct PMSG_REQ_SAVE_DSF_REWARD_USER;
struct PMSG_REQ_SAVE_EVOMON_RESULT;
struct PMSG_REQ_SET_DSF_WINNER_INFO;
struct PMSG_REQ_SETPENTAGRAMJEWEL;
struct PMSG_REQ_START_DUEL;
struct PMSG_REQ_STOPMINIMAPDATA;
struct PMSG_REQ_SWITCHWARE;
struct PMSG_REQ_TAXMONEYINFO;
struct PMSG_REQ_TAXRATECHANGE;
struct PMSG_REQ_UBF_ACCOUNT_USERINFO;
struct PMSG_REQ_UBF_CANCEL;
struct PMSG_REQ_UBF_GET_REWARD;
struct PMSG_REQ_UBF_INFO;
struct PMSG_REQ_UBF_JOIN;
struct PMSG_REQ_UBF_REAL_NAME;
struct PMSG_REQ_UBF_SET_RECEIVED_REWARD;
struct PMSG_REQ_UPGRADE_PENTAGRAM_JEWEL;
struct PMSG_REQ_USE_BOX;
struct PMSG_REQ_USEILLUSIONTEMPLESKILL;
struct PMSG_REQ_USETRANSFORMATIONRING;
struct PMSG_REQ_USEWEAPON;
struct PMSG_REQ_VIEW_EC_MN;
struct PMSG_REQ_VIEW_EC_MN;
struct PMSG_REQ_WAITLIST_PARTYMATCHING;
struct PMSG_REQ_WEAPON_DAMAGE_VALUE;
struct PMSG_REQUEST_PET_ITEM_COMMAND;
struct PMSG_REQUEST_PET_ITEMINFO;
struct PMSG_RES_EXPEVENTINFO;
struct PMSG_RESULT_CCF_ENTERCHECK;
struct PMSG_RESULT_MOVEBLOODCASTLE;
struct PMSG_RESULT;
struct PMSG_RSA_KEY;
struct PMSG_RUUD;
struct PMSG_SELLREQUEST;
struct PMSG_SEND_AH_INFO;
struct PMSG_SEND_CCF_INFO_ALL_SVR;
struct PMSG_SEND_EVENT_BANNER;
struct PMSG_SEND_HITHACK_INFO;
struct PMSG_SEND_MUUN_RIDE_VIEWPORT_INFO;
struct PMSG_SEND_NEWS;
struct PMSG_SEND_PCPOINT;
struct PMSG_SERVERCMD;
struct PMSG_SERVERINFO;
struct PMSG_SERVERLIST_SERVER;
struct PMSG_SERVERMSG;
struct PMSG_SERVERSLIST_COUNT;
struct PMSG_SET_CHAT_COLOR;
struct PMSG_SET_DEVILSQUARE;
struct PMSG_SET_OFFTRADE;
struct PMSG_SETAGILITYBUG;
struct PMSG_SETCHARSET;
struct PMSG_SETQUEST;
struct PMSG_SHOPITEMCOUNT;
struct PMSG_SIMPLE_GUILDVIEWPORT_COUNT;
struct PMSG_SIMPLE_GUILDVIEWPORT;
struct PMSG_SKILLKEY;
struct PMSG_STAT_BONUS;
struct PMSG_STATEBLOODCASTLE;
struct PMSG_STATS_RESULT;
struct PMSG_SUMMONER_INFO;
struct PMSG_TALKREQUEST;
struct PMSG_TALKRESULT;
struct PMSG_TARGET_HP_DELETE;
struct PMSG_TARGET_HP_INFO;
struct PMSG_TARGET_HP;
struct PMSG_TARGET_TELEPORT;
struct PMSG_TELEPORT_RESULT;
struct PMSG_TELEPORT;
struct PMSG_TIMEVIEW;
struct PMSG_TRADE_GOLD;
struct PMSG_TRADE_OKBUTTON;
struct PMSG_TRADE_REQUEST;
struct PMSG_TRADE_RESPONSE;
struct PMSG_UBF_ACCOUNT_USER_COPY_PETITEM;
struct PMSG_UBF_ACCOUNT_USER_COPY_RESULT;
struct PMSG_UBF_ACCOUNT_USER_COPY;
struct PMSG_UBF_ANS_CANCEL_REGISTER_USER;
struct PMSG_UBF_COPY_PETITEM;
struct PMSG_UBF_REGISTER_ACCOUNT_USER_RESULT;
struct PMSG_UBF_REGISTER_ACCOUNT_USER;
struct PMSG_UBF_REQ_CANCEL_REGISTER_USER;
struct PMSG_UNIONLIST_REQ;
struct PMSG_UPDATE_PSHOPITEMVALUE_INFO;
struct PMSG_USE_STAT_FRUIT;
struct PMSG_USEEXPANSIONITEM;
struct PMSG_USEITEM_MUUN_INVEN_RESULT;
struct PMSG_USEITEM_MUUN_INVEN;
struct PMSG_USEITEM;
struct PMSG_USER_MUUN_EQUIPMENT_CHANGED;
struct PMSG_USEREQUIPMENTCHANGED;
struct PMSG_VIEWPORTCREATE_CHANGE;
struct PMSG_VIEWPORTCREATE;
struct PMSG_VIEWPORTDESTROY;
struct PMSG_WAREHOUSEMONEYINOUT;
struct PMSG_WAREHOUSEPASSSEND;
struct PMSG_ANS_DUEL_ANSWER;
struct PMSG_ANS_DUEL_OK;
struct PMSG_GENS_REWARD_CODE;
struct PMSG_REQ_ACHERON_ENTER;
struct PMSG_REQ_ARCA_BATTLE_ENTER;
struct PMSG_REQ_DUEL_EXIT;
struct PMSG_REQ_DUEL_JOINCNANNEL;
struct PMSG_REQ_DUEL_LEAVECNANNEL;
struct PMSG_REQ_GENS_INFO;
struct PMSG_REQ_INVENTORY_EQUIPMENT_ITEM;
struct PMSG_REQ_NIXIELAKE_ENTER;
struct PMSG_REQ_REG_GENS_MEMBER;
struct PMSG_REQ_SEGEDE_GENS_MEMBER;


class GameProtocol
{
public:

	GameProtocol();
	~GameProtocol();

	void ProtocolCore(BYTE protoNum, LPBYTE aRecv, int aLen, LPGameObject &lpObj, BOOL Encrypt);
	void MsgSendV2(LPGameObject &lpObj, BYTE* Msg, int size);
	void ChatSendV2(LPGameObject &lpObj, BYTE* Msg, int size);
	void CGLiveClient(PMSG_CLIENTTIME* lpClientTime, short aIndex);
	void GCCheckMainExeKeySend(LPGameObject &lpObj);
	WORD EncryptCheckSumKey(WORD wSource);
	void CGCheckMainRecv(PMSG_CHECK_MAINEXE_RESULT* lpMsg, LPGameObject &lpObj);
	void PEchoProc(BYTE* aMsg, int aLen, short aIndex);
	void GCResultSend(LPGameObject &lpObj, BYTE headcode, BYTE result);
	void ChatSend(LPGameObject &lpObj, char* szChat);
	void vChatSend(LPGameObject &lpObj, char* szChat, ...);
	void AllSendServerMsg(char* chatmsg);
	void DataSendAll(BYTE* lpMsg, int iMsgSize);
	void ChatTargetSend(LPGameObject &lpObj, char* szChat, int senduser);
	void PChatProc(PMSG_CHATDATA* lpChat, short aIndex);
	void CGChatRecv(PMSG_CHATDATA_NUMBER* lpMsg, LPGameObject &lpObj);
	void GCServerMsgSend(BYTE msg, LPGameObject &lpObj);
	void GCServerMsgStringSend(char* szMsg, LPGameObject &lpObj, BYTE type);
	void GCServerMsgStringSendEx(LPGameObject &lpObj, BYTE type, LPSTR szMsg, ...);
	void GCServerMsgStringSendAll(LPSTR  szMsg, BYTE type);
	void GCServerMsgStringSendAllEx(BYTE type, LPSTR szMsg, ...);
	void GCServerMsgStringSendGuild(GUILD_INFO_STRUCT* lpNode, char* szMsg, BYTE type);
	void GCEventStateSend(LPGameObject &lpObj, BYTE state, BYTE event);
	void GCMapEventStateSend(int map, BYTE state, BYTE event);
	void CGChatWhisperRecv(PMSG_CHATDATA_WHISPER* lpMsg, LPGameObject &lpObj);
	void SCPJoinResultSend(LPGameObject &lpObj, BYTE result);
	void CSPJoinIdPassRequest(PMSG_IDPASS* lpMsg, LPGameObject &lpObj);
	void GCJoinBillCheckSend(char* AccountId, LPGameObject &lpObj);
	void GCJoinResult(BYTE result, LPGameObject &lpObj);
	void GCJoinSocketResult(BYTE result, SOCKET Socket);
	void CGClientCloseMsg(PMSG_CLIENTCLOSE* lpMsg, LPGameObject &lpObj);
	void GCCloseMsgSend(LPGameObject &lpObj, BYTE result);
	void CGClientMsg(PMSG_CLIENTMSG* lpMsg, LPGameObject &lpObj);
	void CGPCharacterCreate(PMSG_CHARCREATE* lpMsg, LPGameObject &lpObj);
	void CGPCharDel(PMSG_CHARDELETE* lpMsg, LPGameObject &lpObj);
	void CGPCharacterMapJoinRequest(PMSG_CHARMAPJOIN* lpMsg, LPGameObject &lpObj);
	void GCLevelUpMsgSend(LPGameObject &lpObj, int iSendEffect);
	void CGLevelUpPointAdd(PMSG_LVPOINTADD* lpMsg, LPGameObject &lpObj);
	void GCInventoryItemOneSend(LPGameObject &lpObj, int pos);
	void GCPkLevelSend(LPGameObject &lpObj, BYTE pklevel);
	void GCMagicListOneSend(LPGameObject &lpObj, char Pos, unsigned short type, BYTE level, unsigned short skill, BYTE btListType);
	void GCMagicListOneDelSend(LPGameObject &lpObj, char Pos, unsigned short type, BYTE level, unsigned short skill, BYTE btListType);
	void GCMagicListMultiSend(LPGameObject &lpObj, BYTE btListType);
	void GCEquipmentSend(LPGameObject &lpObj);
	void GCRecallMonLife(LPGameObject &lpObj, int maxlife, int life);
	void GCTimeViewSend(LPGameObject &lpObj, int second);
	void GCGoalSend(LPGameObject &lpObj, char* Name1, BYTE score1, char* Name2, BYTE score2);
	void GCSkillKeyRecv(PMSG_SKILLKEY* lpMsg, LPGameObject &lpObj);
	void GCSkillKeySend(LPGameObject &lpObj, BYTE* keybuffer, BYTE GO, BYTE Qk, BYTE Wk, BYTE Ek, /*<regrel ebp+0x20>*/ /*|0x1|*/ BYTE ChatWnd, BYTE Rk, int QWER);
	void GCMoneySend(LPGameObject &lpObj, unsigned long money);
	void GCItemInventoryPutSend(LPGameObject &lpObj, BYTE result, BYTE iteminfo1, BYTE iteminfo2);
	void CGItemGetRequest(PMSG_ITEMGETREQUEST* lpMsg, LPGameObject &lpObj, BYTE ID, BYTE ID1);
	bool CGItemDropRequest(PMSG_ITEMTHROW* lpMsg, LPGameObject &lpObj, int drop_type);
	void GCItemMoveResultSend(LPGameObject &lpObj, BYTE result, BYTE pos, BYTE* const ItemInfo);
	void CGInventoryItemMove(PMSG_INVENTORYITEMMOVE* lpMsg, LPGameObject &lpObj);
	void GCEquipmentChange(LPGameObject &lpObj, int pos);
	void CGTalkRequestRecv(PMSG_TALKREQUEST* lpMsg, LPGameObject &lpObj);
	void GCUserWarehouseSend(LPGameObject &lpObj);
	void CGBuyRequestRecv(PMSG_BUYREQUEST* lpMsg, LPGameObject &lpObj);
	void CGSellRequestRecv(PMSG_SELLREQUEST* lpMsg, LPGameObject &lpObj);
	int  GetNeedMoneyItemDurRepaire(/*LPGameObject &lpObj, */class CItem* DurItem, int RequestPos);
	void ItemDurRepaire(LPGameObject &lpObj, /*LPGameObject &lpObj, */class CItem* DurItem, int pos, int RequestPos);
	void CGModifyRequestItem(PMSG_ITEMDURREPAIR* lpMsg, LPGameObject &lpObj);
	void CGTradeRequestSend(PMSG_TRADE_REQUEST* lpMsg, LPGameObject &lpObj);
	void CGTradeResponseRecv(PMSG_TRADE_RESPONSE* lpMsg, LPGameObject &lpObj);
	bool GCTradeResponseSend(BYTE response, LPGameObject &lpObj, LPSTR id, WORD level, int GuildNumber);
	int GCTradeOtherDel(LPGameObject &lpObj, BYTE tradeindex);
	int GCTradeOtherAdd(LPGameObject &lpObj, BYTE tradeindex, LPBYTE iteminfo);
	void CGTradeMoneyRecv(PMSG_TRADE_GOLD* lpMsg, LPGameObject &lpObj);
	bool GCTradeMoneyOther(LPGameObject &lpObj, DWORD money);
	bool GCTradeOkButtonSend(LPGameObject &lpObj, BYTE flag);
	void CGTradeOkButtonRecv(PMSG_TRADE_OKBUTTON* lpMsg, LPGameObject &lpObj);
	void CGTradeCancelButtonRecv(LPGameObject &lpObj);
	void CGTradeResult(LPGameObject &lpObj, BYTE result);
	void CGPartyRequestRecv(PMSG_PARTYREQUEST* lpMsg, LPGameObject &lpObj);
	void CGPartyRequestResultRecv(PMSG_PARTYREQUESTRESULT* lpMsg, LPGameObject &lpObj);
	void CGPartyList(LPGameObject &lpObj);
	void CGPartyListAll(int pnumber);
	void CGPartyDelUser(PMSG_PARTYDELUSER* lpMsg, LPGameObject &lpObj, int nType);
	void GCPartyDelUserSend(LPGameObject &lpObj);
	void GCPartyDelUserSendNoMessage(LPGameObject &lpObj);
	void CGGuildRequestRecv(PMSG_GUILDJOINQ* lpMsg, LPGameObject &lpObj);
	void CGGuildRequestResultRecv(PMSG_GUILDQRESULT* lpMsg, LPGameObject &lpObj);
	void CGGuildListAll(int pnumber);
	void CGGuildDelUser(PMSG_GUILDDELUSER* lpMsg, LPGameObject &lpObj);
	void GCGuildDelUserResult(LPGameObject &lpObj, BYTE Result);
	void GCGuildMasterQuestionSend(LPGameObject &lpObj);
	void CGGuildMasterAnswerRecv(PMSG_GUILDMASTERANSWER* lpMsg, LPGameObject &lpObj);
	void GCGuildMasterManagerRun(LPGameObject &lpObj);
	void CGGuildMasterInfoSave(LPGameObject &lpObj,PMSG_GUILDINFOSAVE* lpMsg);
	void CGGuildMasterCreateCancel(LPGameObject &lpObj);
	void GCGuildViewportNowPaint(LPGameObject &lpObj, char* guildname, BYTE* Mark, int isGuildMaster);
	void GCGuildViewportDelNow(LPGameObject &lpObj, int isGuildMaster);
	void GCManagerGuildWarEnd(char* GuildName);
	void GCManagerGuildWarSet(char* GuildName1, char* GuildName2, int type);
	void GCGuildWarRequestResult(char* GuildName, LPGameObject &lpObj, int type);
	void GCGuildWarRequestSend(char* GuildName, LPGameObject &lpObj, int type);
	void GCGuildWarRequestSendRecv(PMSG_GUILDWARSEND_RESULT* lpMsg, LPGameObject &lpObj);
	void GCGuildWarDeclare(LPGameObject &lpObj, char* _guildname);
	void GCGuildWarEnd(LPGameObject &lpObj, BYTE result, char* _guildname);
	void GCGuildWarScore(LPGameObject &lpObj);
	void CGWarehouseMoneyInOut(LPGameObject &lpObj,PMSG_WAREHOUSEMONEYINOUT* lpMsg);
	void GCWarehouseInventoryMoneySend(LPGameObject &lpObj, BYTE result, int money, int wmoney);
	void CGWarehouseUseEnd(LPGameObject &lpObj);
	void GCWarehouseStateSend(LPGameObject &lpObj, BYTE state);
	void GCWarehouseRecivePassword(LPGameObject &lpObj,PMSG_WAREHOUSEPASSSEND* lpMsg);
	void GCUserChaosBoxSend(LPGameObject &lpObj, int iChaosBoxType);
	void CGChaosBoxItemMixButtonClick(PMSG_CHAOSMIX* aRecv, LPGameObject &lpObj);
	void CGChaosBoxUseEnd(LPGameObject &lpObj);
	void PMoveProc(PMSG_MOVE* lpMove, LPGameObject &lpObj);
	void RecvPositionSetProc(PMSG_POSISTION_SET* lpMove, LPGameObject &lpObj);
	void CGAttack(PMSG_ATTACK* lpMsg, LPGameObject &lpObj);
	void GCDamageSendPoison(LPGameObject &lpObj, int damage, int iShieldDamage);
	void GCDamageSend(LPGameObject &lpObj, int TargetIndex, int AttackDamage, int MSBFlag, int MSBDamage, int iShieldDamage);
	void GCKillPlayerExpSend(LPGameObject &lpObj, int TargetIndex, int exp, int AttackDamage, int MSBFlag);
	void GCKillPlayerMasterExpSend(LPGameObject &lpObj, int TargetIndex, int exp, int AttackDamage, BOOL MSBFlag);
	void GCDiePlayerSend(LPGameObject &lpObj, int TargetIndex, BYTE skill, int KillerIndex);
	void GCActionSend(LPGameObject &lpObj, BYTE ActionNumber, LPGameObject &lpObjTarget);
	void CGActionRecv(PMSG_ACTION* lpMsg, LPGameObject &lpObj);
	void CGMagicAttack(LPBYTE lpRecv, LPGameObject &lpObj);
	void CGMagicAttack(PMSG_MAGICATTACK* lpMsg, LPGameObject &lpObj);
	void CGRageAttack(LPBYTE lpRecv, LPGameObject &lpObj);
	void CGRageAttackRange(PMSG_RAGE_ATTACK_RANGE* lpMsg, LPGameObject &lpObj);
	void GCMagicAttackNumberSend(LPGameObject &lpObj, WORD MagicNumber, int usernumber, BYTE skillsuccess);
	void GCMonkMagicAttack(LPGameObject &lpObj, WORD MagicNumber, int usernumber,  BYTE skillsuccess);
	void GCMagicCancelSend(LPGameObject &lpObj, WORD MagicNumber);
	void GCMagicCancel(PMSG_MAGICCANCEL* lpMsg, LPGameObject &lpObj);
	void GCUseEffectItem(LPGameObject &lpObj, int iEffectUseOption, int iOptionType, int iEffectType, int iLeftTime);
	void GCUseEffectItem2(LPGameObject &lpObj, int iEffectUseOption, int iOptionType, int iEffectType, int iLeftTime);
	void CGMagicCancel(PMSG_MAGICCANCEL* lpMsg, LPGameObject &lpObj);
	void GCUseMonsterSkillSend(LPGameObject &lpObj, CGameObject* lpTargetObj, int iSkillNumber);
	void GCStateInfoSend(LPGameObject &lpObj, BYTE state, int BuffViewport);
	void CGTeleportRecv(PMSG_TELEPORT* lpMsg, LPGameObject &lpObj);
	void CGReqMapMove(PMSG_REQ_MAPMOVE *lpMsg, int iIndex);
	void GCSendMapMoveCheckSum(LPGameObject &lpObj);
	void CGTargetTeleportRecv(PMSG_TARGET_TELEPORT* lpMsg, LPGameObject &lpObj);
	void GCTeleportSend(LPGameObject &lpObj, unsigned short MoveNumber, BYTE MapNumber, BYTE MapX, BYTE MapY, BYTE Dir);
	void CGBeattackRecv(BYTE* lpRecv, LPGameObject &lpObj, int magic_send);
	void CGDurationMagicRecv(PMSG_DURATION_MAGIC_RECV * lpMsg, LPGameObject &lpObj);
	void CGDurationMagicRecv(LPBYTE lpRecv, LPGameObject &lpObj);
	void ObjectMapJoinPositionSend(short aIndex);
	void CGUseItemRecv(PMSG_USEITEM* lpMsg, LPGameObject &lpObj);
	void GCReFillSend(LPGameObject &lpObj, int Life, BYTE Ipos, BYTE flag,  WORD wShield);
	void GCManaSend(LPGameObject &lpObj, int Mana, BYTE Ipos, BYTE flag,  WORD BP);
	void GCInventoryItemDeleteSend(LPGameObject &lpObj, BYTE pos, BYTE flag);
	void GCItemUseSpecialTimeSend(LPGameObject &lpObj, BYTE number, int time);
	void GCItemDurSend(LPGameObject &lpObj, BYTE pos, BYTE dur, BYTE flag);
	void GCItemDurSend2(LPGameObject &lpObj, BYTE pos, BYTE dur, BYTE flag);
	void CGWeatherSend(LPGameObject &lpObj, BYTE weather);
	void GCServerCmd(LPGameObject &lpObj, BYTE type, BYTE Cmd1, BYTE Cmd2);
	void GCReqmoveDevilSquare(PMSG_REQ_MOVEDEVILSQUARE* lpMsg, LPGameObject &lpObj);
	void GCReqDevilSquareRemainTime(PMSG_REQ_DEVILSQUARE_REMAINTIME* lpMsg, LPGameObject &lpObj);
	void AllSendMsg(BYTE* Msg, int size);
	void AllSendSameMapMsg(BYTE* Msg, int size, BYTE mapnumber);
	void GCSendPing(LPGameObject &lpObj);
	void GCPingSendRecv(PMSG_PING_RESULT* aRecv, LPGameObject &lpObj);
	void GCRegEventChipRecv(PMSG_REGEVENTCHIP* lpMsg, LPGameObject &lpObj);
	void GCGetMutoNumRecv(PMSG_GETMUTONUMBER* lpMsg, LPGameObject &lpObj);
	void GCUseEndEventChipRescv(LPGameObject &lpObj);
	void GCUseRenaChangeZenRecv(PMSG_EXCHANGE_EVENTCHIP* lpMsg, LPGameObject &lpObj);
	void CGRequestQuestInfo(LPGameObject &lpObj);
	void GCSendQuestInfo(LPGameObject &lpObj, int QuestIndex);
	void CGSetQuestState(PMSG_SETQUEST* lpMsg, LPGameObject &lpObj);
	void GCSendQuestPrize(LPGameObject &lpObj, BYTE Type, BYTE Count);
	void CGCloseWindow(LPGameObject &lpObj);
	void CGRequestEnterBloodCastle(PMSG_REQ_MOVEBLOODCASTLE* lpMsg, int iIndex);
	void CGRequestEnterChaosCastle(PMSG_REQ_MOVECHAOSCASTLE* lpMsg, int iIndex);
	void CGRequestRepositionUserInChaosCastle(PMSG_REQ_REPOSUSER_IN_CC* lpMsg, LPGameObject &lpObj);
	void CGRequestEventEnterCount(PMSG_REQ_CL_ENTERCOUNT* lpMsg, LPGameObject &lpObj);
	void CGRequestLottoRegister(PMSG_REQ_2ANV_LOTTO_EVENT* lpMsg, LPGameObject &lpObj);
	void CGReqMoveOtherServer(PMSG_REQ_MOVE_OTHERSERVER* lpMsg, LPGameObject &lpObj);
	void GCPacketCheckSumRecv(PMSG_PACKETCHECKSUM* aRecv, LPGameObject &lpObj);
	void CGDuelStartRequestRecv(PMSG_REQ_START_DUEL* lpMsg, LPGameObject &lpObj);
	void CGDuelEndRequestRecv(PMSG_REQ_END_DUEL* lpMsg, LPGameObject &lpObj);
	void CGDuelOkRequestRecv(PMSG_ANS_DUEL_OK* lpMsg, LPGameObject &lpObj);
	void GCSendDuelScore(LPGameObject &lpObj1, LPGameObject &lpObj2);
	void GCSendGetItemInfoForParty(LPGameObject &lpObj, class CMapItem* lpItem);
	void GCSendEffectInfo(LPGameObject &lpObj, BYTE btType);
	void CGRequestPetItemCommand(PMSG_REQUEST_PET_ITEM_COMMAND* lpMsg, LPGameObject &lpObj);
	void CGRequestPetItemInfo(PMSG_REQUEST_PET_ITEMINFO* lpMsg, LPGameObject &lpObj);
	void GCGuildViewportInfo(PMSG_REQ_GUILDVIEWPORT* aRecv, LPGameObject &lpObj);
	void CGGuildAssignStatus(PMSG_GUILD_ASSIGN_STATUS_REQ* aRecv, LPGameObject &lpObj);
	void CGGuildAssignType(PMSG_GUILD_ASSIGN_TYPE_REQ* aRecv, LPGameObject &lpObj);
	void CGRelationShipReqJoinBreakOff(PMSG_RELATIONSHIP_JOIN_BREAKOFF_REQ* aRecv, LPGameObject &lpObj);
	void CGRelationShipAnsJoinBreakOff(PMSG_RELATIONSHIP_JOIN_BREAKOFF_ANS* aRecv, LPGameObject &lpObj);
	void CGUnionList(PMSG_UNIONLIST_REQ* aRecv, LPGameObject &lpObj);
	void CGRelationShipReqKickOutUnionMember(PMSG_KICKOUT_UNIONMEMBER_REQ* aRecv, LPGameObject &lpObj);
	void CGReqMapSvrAuth(PMSG_REQ_MAPSERVERAUTH* lpMsg, int iIndex);
	void GCAnsMapSvrAuth(int iIndex, int iResult);
	void CGReqCastleSiegeState(PMSG_REQ_CASTLESIEGESTATE* lpMsg, int iIndex);
	void GCAnsCastleSiegeState(int iIndex, int iResult, char* lpszGuildName, char* lpszGuildMaster);
	void CGReqRegCastleSiege(PMSG_REQ_REGCASTLESIEGE* lpMsg, int iIndex);
	void GCAnsRegCastleSiege(int iIndex, int iResult, char* lpszGuildName);
	void CGReqGiveUpCastleSiege(PMSG_REQ_GIVEUPCASTLESIEGE* lpMsg, int iIndex);
	void GCAnsGiveUpCastleSiege(int iIndex, int iResult, int bGiveUp, int iMarkCount, char* lpszGuildName);
	void CGReqGuildRegInfo(PMSG_REQ_GUILDREGINFO* lpMsg, int iIndex);
	void GCAnsGuildRegInfo(int iIndex, int iResult,CSP_ANS_GUILDREGINFO* lpMsgResult);
	void CGReqRegGuildMark(PMSG_REQ_REGGUILDMARK* lpMsg, int iIndex);
	void GCAnsRegGuildMark(int iIndex, int iResult,CSP_ANS_GUILDREGMARK* lpMsgResult);
	void CGReqNpcBuy(PMSG_REQ_NPCBUY* lpMsg, int iIndex);
	void GCAnsNpcBuy(int iIndex, int iResult, int iNpcNumber, int iNpcIndex);
	void CGReqNpcRepair(PMSG_REQ_NPCREPAIR* lpMsg, int iIndex);
	void GCAnsNpcRepair(int iIndex, int iResult, int iNpcNumber, int iNpcIndex, int iNpcHP, int iNpcMaxHP);
	void CGReqNpcUpgrade(PMSG_REQ_NPCUPGRADE* lpMsg, int iIndex);
	void GCAnsNpcUpgrade(int iIndex, int iResult, int iNpcNumber, int iNpcIndex, int iNpcUpType, int iNpcUpValue);
	void CGReqTaxMoneyInfo(PMSG_REQ_TAXMONEYINFO* lpMsg, int iIndex);
	void GCAnsTaxMoneyInfo(int iIndex, int iResult, BYTE btTaxRateChaos, BYTE btTaxRateStore, __int64 i64Money);
	void CGReqTaxRateChange(PMSG_REQ_TAXRATECHANGE* lpMsg, int iIndex);
	void GCAnsTaxRateChange(int iIndex, int iResult, BYTE btTaxType, int iTaxRate);
	void CGReqMoneyDrawOut(PMSG_REQ_MONEYDRAWOUT* lpMsg, int iIndex);
	void GCAnsMoneyDrawOut(int iIndex, int iResult, __int64 i64Money);
	void GCAnsCsGateState(int iIndex, int iResult, int iGateIndex);
	void CGReqCsGateOperate(PMSG_REQ_CSGATEOPERATE* lpMsg, int iIndex);
	void GCAnsCsGateOperate(int iIndex, int iResult, int iGateIndex, int iGateOperate);
	void GCAnsCsGateCurState(int iIndex, int iGateIndex, int iGateOperate);
	void GCAnsCsAccessSwitchState(int iIndex, int iSwitchIndex, int iSwitchUserIndex, BYTE btSwitchState);
	void GCAnsCsAccessCrownState(int iIndex, BYTE btCrownState);
	void GCAnsCsNotifyStart(int iIndex, BYTE btStartState);
	void GCAnsCsNotifyProgress(int iIndex, BYTE btCastleSiegeState, LPCSTR lpszGuildName);
	void GCAnsCsMapSvrTaxInfo(int iIndex, BYTE btTaxType, BYTE btTaxRate);
	void CGReqCsMiniMapData(PMSG_REQ_MINIMAPDATA* lpMsg, int iIndex);
	void GCAnsCsMiniMapData(int iIndex, BYTE btResult);
	void CGReqStopCsMiniMapData(PMSG_REQ_STOPMINIMAPDATA* lpMsg, int iIndex);
	void CGReqCsSendCommand(PMSG_REQ_CSCOMMAND* lpMsg, int iIndex);
	void GCAnsCsSendCommand(int iCsJoinSide, BYTE btTeam, BYTE btX, BYTE btY, BYTE btCommand);
	void GCAnsCsLeftTimeAlarm(BYTE btHour, BYTE btMinute);
	void GCAnsSelfCsLeftTimeAlarm(int iIndex, BYTE btHour, BYTE btMinute);
	void CGReqCsSetEnterHuntZone(PMSG_REQ_CSHUNTZONEENTER* lpMsg, int iIndex);
	void GCAnsCsSetEnterHuntZone(int iIndex, BYTE btResult, BYTE btEnterHuntZone);
	void CGReqNpcDbList(PMSG_REQ_NPCDBLIST* lpMsg, int iIndex);
	void CGReqCsRegGuildList(PMSG_REQ_CSREGGUILDLIST* lpMsg, int iIndex);
	void CGReqCsAttkGuildList(PMSG_REQ_CSATTKGUILDLIST* lpMsg, int iIndex);
	void CGReqWeaponUse(PMSG_REQ_USEWEAPON* aRecv, int iIndex);
	void CGReqWeaponDamageValue(PMSG_REQ_WEAPON_DAMAGE_VALUE* aRecv, int iIndex);
	void CGReqGuildMarkOfCastleOwner(PMSG_REQ_GUILDMARK_OF_CASTLEOWNER* aRecv, int iIndex);
	void CGReqJewelMix(PMSG_REQ_JEWEL_MIX* lpMsg, int iIndex);
	void GCAnsJewelMix(int iIndex, int iResult);
	void CGReqJewelUnMix(PMSG_REQ_JEWEL_UNMIX* lpMsg, int iIndex);
	void GCAnsJewelUnMix(int iIndex, int iResult);
	void CGReqCrywolfInfo(PMSG_REQ_CRYWOLF_INFO* lpMsg, int iIndex);
	void GCAnsCrywolfInfo(int iIndex, BYTE btOccupationState, BYTE btCrywolfState);
	void CGReqAlatrContract(PMSG_REQ_CRYWOLF_ALTAR_CONTRACT* lpMsg, int iIndex);
	void CGReqPlusChaosRate(PMSG_REQ_CRYWOLF_BENEFIT_PLUS_CHAOSRATE* lpMsg, int iIndex);
	void CGReqKanturuStateInfo(PMSG_REQ_KANTURU_STATE_INFO* lpMsg, int iIndex);
	void GCReqEnterKanturuBossMap(PMSG_REQ_ENTER_KANTURU_BOSS_MAP* lpMsg, int iIndex);
	void GCIllusionTempleSendReward(LPGameObject &lpObj);
	void WereWolfQuarrelCheck(LPGameObject &lpObj);
	void GateKeeperCheck(LPGameObject &lpObj);
	void GCMasterLevelUpMsgSend(LPGameObject &lpObj);
	void CGReqIllusionTempleUseSkill(PMSG_REQ_USEILLUSIONTEMPLESKILL * aRecv, LPGameObject &lpObj);
	void GCSendIllusionTempleKillPoint(LPGameObject &lpObj, BYTE KillPoint);
	void CGReqLuckyCoinRegister(PMSG_REQ_LUCKYCOIN_REGISTER * aRecv, LPGameObject &lpObj);
	void CGReqLuckyCoinInfo(LPGameObject &lpObj);
	void CGReqLuckyCoinTrade(PMSG_REQ_LUCKYCOIN_TRADE * aRecv, LPGameObject &lpObj);
	void GCAnsLuckyCoinTrade(LPGameObject &lpObj, BYTE Result);
	void CGReqCastleHuntZoneEntrance(PMSG_REQ_MOVE_TO_CASTLE_HUNTZONE* aRecv, LPGameObject &lpObj);
	void GCSendObjectCreationState(int iObjectIndex);
	void GCSendObjectHP(LPGameObject &lpObj, int aTargetIndex);
	void CGReqAntiCheatRecv(LPGameObject &lpObj, PMSG_SEND_AH_INFO * aRecv);
	void CGReqFileCrcRecv(LPGameObject &lpObj, PMSG_REQ_CRCDATA * aRecv);
	void GCElementalDamageSend(LPGameObject &lpObj, int TargetIndex, int Damage, int Elemental);
	void GCSendErtelInfo(LPGameObject &lpObj);
	void CGReqEnterAcheron(LPGameObject &lpObj);
	void GCObjectLifeInfo(int iIndex, short sObjNum, int iMaxLife, int iCurLife);
	void CGAgilityRecv(LPGameObject &lpObj, PMSG_AGILITYSEND * aRecv);
	void GCPriceSend(LPGameObject &lpObj, BYTE type, SHOP_DATA *lpShopData);
	int OnCGInviteDuel(PMSG_REQ_DUEL_INVITE* lpMsg, LPGameObject &lpObj);
	int OnCGAnswerDuel(PMSG_ANS_DUEL_ANSWER* lpMsg, LPGameObject &lpObj);
	int OnCGLeaveDuel(PMSG_REQ_DUEL_EXIT* lpMsg, LPGameObject &lpObj);
	int OnDuelChannelJoin(PMSG_REQ_DUEL_JOINCNANNEL* lpMsg, LPGameObject &lpObj);
	int OnDuelChannelLeave(PMSG_REQ_DUEL_LEAVECNANNEL* lpMsg, LPGameObject &lpObj);
	void CGReqRegGensMember(PMSG_REQ_REG_GENS_MEMBER *lpMsg, int iIndex);
	void CGReqSecedeGensMember(PMSG_REQ_SEGEDE_GENS_MEMBER *lpMsg, int iIndex);
	void CGReqGensReward(PMSG_GENS_REWARD_CODE *lpMsg, int iIndex);
	void CGReqGensMemberInfo(PMSG_REQ_GENS_INFO *lpMsg, int iIndex);
	void CGInventoryEquipment(PMSG_REQ_INVENTORY_EQUIPMENT_ITEM *lpMsg, LPGameObject &lpObj);
	void CGReqUseTransformationRing(PMSG_REQ_USETRANSFORMATIONRING *lpMsg, int iIndex);
	void GCSendAttackSpeed(int iIndex);
	void GCChaosMachinePriceSend(LPGameObject &lpObj);
	void CGReqEnterDoppelGanger(PMSG_REQ_ENTER_DOPPELGANGER *lpMsg, int iIndex);
	void CGReqEnterZone(PMSG_REQ_ENTER_ZONE *lpMsg, int iIndex);	
	void CGReqInJewelPentagramItem(PMSG_REQ_IN_PENTAGRAM_JEWEL *lpMsg, LPGameObject &lpObj);
	void GCAnsInJewelPentagramItem(LPGameObject &lpObj, int iResult, BYTE btJewelPos, BYTE btJewelIndex, BYTE btItemType, WORD wItemIndex, BYTE btMainAttribute, BYTE btLevel, BYTE btRank1OptionNum, BYTE btRank1Level, BYTE btRank2OptionNum, BYTE btRank2Level, BYTE btRank3OptionNum, BYTE btRank3Level, BYTE btRank4OptionNum, BYTE btRank4Level, BYTE btRank5OptionNum, BYTE btRank5Level);
	void CGReqOutJewelPentagramItem(PMSG_REQ_OUT_PENTAGRAM_JEWEL *lpMsg, LPGameObject &lpObj);
	void GCAnsOutJewelPentagramItem(int iIndex, int iResult, BYTE btJewelPos, BYTE btJewelDBIndex);
	void CGReqRefinePentagramJewel(PMSG_REQ_REFINE_PENTAGRAM_JEWEL *lpMsg, LPGameObject &lpObj);
	void GCAnsRefinePentagramJewel(int iIndex, BYTE btResult);
	void CGReqUpgradePentagramJewel(PMSG_REQ_UPGRADE_PENTAGRAM_JEWEL *lpMsg, LPGameObject &lpObj);
	void GCAnsUpgradePentagramJewel(int iIndex, BYTE btResult);
	void GCAnsPentagramJewelInOut(int iIndex, BYTE btResult);
	void CGReqArcaBattleGuildMasterJoin(PMSG_REQ_ARCA_BATTLE_JOIN *lpMsg, int iIndex);
	void CGReqArcaBattleGuildMemberJoin(PMSG_REQ_ARCA_BATTLE_JOIN *lpMsg, int iIndex);
	void CGReqArcaBattleEnter(PMSG_REQ_ARCA_BATTLE_ENTER *lpMsg, int iIndex);
	void CGReqAcheronEnter(PMSG_REQ_ACHERON_ENTER *lpMsg, int iIndex);
	void CGReqArcaBattleBootyExchange(int iIndex);
	void CGReqSpritemapExchange(int iIndex);
	void CGReqRegisteredMemberCnt(int iIndex);
	void GCSendRecvCheck(LPGameObject &lpObj);
	void CGReqAntihackBreach(LPGameObject &lpObj, PMSG_ANTIHACK_BREACH *lpMsg);
	void CGReqAntihackCheck(LPGameObject &lpObj, PMSG_ANTIHACK_CHECK *lpMsg);
	void GCMuunItemDurSend(LPGameObject &lpObj, BYTE pos, BYTE dur);
	void GCMuunEquipmentChange(LPGameObject &lpObj, int pos);
	void GCMuunInventoryItemDeleteSend(LPGameObject &lpObj, BYTE pos, BYTE flag);
	void GCMuunInventoryItemOneSend(LPGameObject &lpObj, int pos); 
	void CGMuunItemGetRequest(PMSG_MUUNITEM_GETREQUEST *lpMsg, LPGameObject &lpObj);
	void CGMuunItemSellRequestRecv(PMSG_MUUN_ITEM_SELLREQUEST *lpMsg, LPGameObject &lpObj);
	void CGReqGuildMatchingList(PMSG_REQ_GUILDMATCHINGLIST *lpMsg, int nUserIndex);
	void CGReqGuildMatchingListSearchWord(PMSG_REQ_GUILDMATCHINGLISTSEARCHWORD *lpMsg, int nUserIndex);
	void CGReqRegGuildMatchingList(PMSG_REQ_REGGUILDMATCHINGDATA *lpMsg, int nUserIndex);
	void CGReqCancelGuildMatchingList(PMSG_REQ_CANCEL_GUILDMATCHINGLIST *lpMsg, int nUserIndex);
	void CGReqJoinGuildMatching(PMSG_REQ_JOIN_GUILDMATCHING *lpMsg, int nUserIndex);
	void CGReqCancelJoinGuildMatching(int nUserIndex);
	void CGReqAllowJoinGuildMatching(PMSG_REQ_ALLOW_JOIN_GUILDMATCHING *lpMsg, int nUserIndex);
	void CGReqGetAllowListJoinGuildMatching(PMSG_REQ_ALLOWLIST_GUILDMATCHING *lpMsg, int nUserIndex);
	void CGReqGetWaitStateListGuildMatching(int nUserIndex);

	void CGReqRegWantedPartyMember(PMSG_REQ_REG_WANTED_PARTYMEMBER *lpMsg, int nUserIndex);
	void CGReqGetPartyMatchingList(PMSG_REQ_GET_PARTYMATCHINGLIST *lpMsg, int nUserIndex);
	void CGReqJoinMemberPartyMatching(PMSG_REQ_MEMBERJOIN_PARTYMATCHINGLIST *lpMsg, int nUserIndex);
	void CGReqMemberJoinStateList(PMSG_REQ_MEMBERJOIN_STATELIST_PARTYMATCHING *lpMsg, int nUserIndex);
	void CGReqMemberJoinStateListLeader(PMSG_REQ_WAITLIST_PARTYMATCHING *lpMsg, int nUserIndex);
	void CGReqAcceptJoinMemberPartyMatching(PMSG_REQ_ACCEPTMEMBER_PARTYMATCHING *lpMsg, int nUserIndex);
	void CGReqCancelPartyMatching(PMSG_REQ_CANCEL_JOIN_PARTYMATCHING *lpMsg, int nUserIndex);

	void GCDisplayBuffeffectPartyMember(LPGameObject &lpObj);
	void GCPartyMemberPosition(int nIndex);
	void CGReqSendMemberPosInfoStart(int nIndex);
	void CGReqSendMemberPosInfoStop(int nIndex);
	void GCReqSendNpcPosInfo(PMSG_REQ_NPC_POSITION *lpMsg, int nIndex);

	void CGReqCCF_DayTime(int iIndex);
	void CGReqCCF_EnterCheck(int iIndex);
	void CG_CCF_UI_OnOff(PMSG_CCF_UI_ONOFF *lpMsg, int nUserIndex);
	int	 CGReqEnterChaosCastleFinal(int iIndex);
	void CGRequestRepositionUserInCCF(PMSG_REQ_REPOSUSER_IN_CCF *lpMsg, LPGameObject &lpObj);
	void CGReq_CCF_Ranking(PMSG_REQ_CCF_RANKING *lpMsg, LPGameObject &lpObj);

	void CGReqEventInvenOpen(LPBYTE lpRecv, LPGameObject &lpObj);
	void CGEventItemGetRequest(PMSG_EVENTITEM_GETREQUEST *lpMsg, LPGameObject &lpObj);
	bool CGEventItemDropRequest(PMSG_EVENTITEM_THROW *lpMsg, LPGameObject &lpObj);
	void GCEventInventoryItemListSend(LPGameObject &lpObj);
	void GCEventItemDurSend(LPGameObject &lpObj, BYTE pos, BYTE dur);
	void GCEventInvenItemOneSend(LPGameObject &lpObj, int pos);
	void GCEventInventoryItemDeleteSend(LPGameObject &lpObj, BYTE pos, BYTE flag);

	void GCResSendExpEventInfo(LPGameObject &lpObj);

	void CGReq_ITL_Relics(PMSG_REQ_ITL_RELATE_RELICS *lpMsg, int iIndex);
	void CG_Req_Enter_ITR(PMSG_REQ_ENTER_ITR *lpMsg, int iIndex);
	void CG_ReqAcceptEnterITR(PMSG_REQ_ACCEPTENTER_ITR *lpMsg, int iIndex);
	BYTE EnterITRCheckUser(int iIndex, int &TroubleUserIndex);

	void CGReqUBFMyCharacterInfo(PMSG_REQ_UBF_INFO *lpMsg, int iIndex);
	void CGReqUBFJoin(PMSG_REQ_UBF_JOIN *lpMsg, int iIndex);
	void CGReqUBFCancel(PMSG_REQ_UBF_CANCEL *lpMsg, int iIndex);
	void CGReqUBFGetRealName(PMSG_REQ_UBF_REAL_NAME *lpMsg, int iIndex);
	void CGReqUBFGetReward(PMSG_REQ_GET_REWARD *lpMsg, int iIndex);

	void CGReqDSFSchedule(int iIndex);
	void CGReqDSFEnter(int iIndex);
	int EnterDSFCheckUser(int iIndex, int & TroubleUserIndex);
	void CGReqAcceptEnterDSF(PMSG_REQ_DSF_ACCEPTENTER *lpMsg, int iIndex);
	void CGReqDSFGoFinalParty(PMSG_REQ_DSF_GO_FINAL_PARTY_INFO *lpMsg, int iIndex);
	void CGReqDSFGetReward(PMSG_REQ_DSF_GET_REWARD *lpMsg, int iIndex);

	void CGReqDoUsePopupType(LPGameObject &lpObj);
	void GCSendEventBanner(LPGameObject &lpObj, int iBannerType);

	void GCSendRareItemPriceInfo(LPGameObject &lpObj);
	void GCSendDisableReconnect(LPGameObject &lpObj);
	bool PacketCheckTime(LPGameObject &lpObj);
	void GCSendDisableReconnectSystem(LPGameObject &lpObj);
	void GCAlterPShopVault(LPGameObject &lpObj, BYTE type);
	void GCSetCharColors(LPGameObject &lpObj);

	void GCSendRuud(LPGameObject &lpObj, int iRuud, int iObtainedRuud, bool bIsObtainedRuud);
	void CGReqUseBoxInInventory(LPGameObject &lpObj, PMSG_REQ_USE_BOX * aRecv);

	void CGEventEntryNotice(int EventType, BYTE state); // event entry notify
	void CGReqNixieBossEnter(PMSG_REQ_NIXIELAKE_ENTER *lpMsg, int iIndex);
	void CGReqHuntingLog(int iIndex);

	void GCPlayerStatsPanelRates(LPGameObject &lpObj);
	void GCPlayerStatsPanelNew(LPGameObject &lpObj);

	void CGRequestStartMuBot(PMSG_MUBOT_REQ_START* lpMsg, LPGameObject &lpObj);
	void CGSaveMuBotSettings(PMSG_MUBOT_SETTINGS_RECV* lpMsg, LPGameObject &lpObj);
	void GCSendMuBotSettings(LPGameObject &lpObj, BYTE* lpData);

	void CGRecvHitHackValues(LPGameObject &lpObj, PMSG_SEND_HITHACK_INFO * lpMsg);
	bool First = true;
private:
	bool DataEncryptCheck(LPGameObject &lpObj, BYTE protoNum, BOOL Encrypt);
};

extern GameProtocol GSProtocol;


#endif // _GAMEPROTOCOL_H

////////////////////////////////////////////////////////////////////////////////
//  vnDev.Games - MuServer S12EP2 IGC v12.0.1.0 - Trong.LIVE - DAO VAN TRONG  //
////////////////////////////////////////////////////////////////////////////////

