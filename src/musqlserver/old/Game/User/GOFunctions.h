#ifndef _MU_GOFUNCTIONS_H_
#define _MU_GOFUNCTIONS_H_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "StdAfx.h"

void gObjSkillUseProcTime500(CGameObject* lpObj);
void MonsterAndMsgProc();
void MoveMonsterProc();
void gObjSetState();
void gObjInit(); // constructor ?
void gObjEnd(); // destructor ?
void gObjClearViewportOfMine(CGameObject* lpObj);
void gObjClearViewport(CGameObject* lpObj);
void gObjCloseSet(int aIndex, int Flag);
void gObjCharTradeClear(CGameObject* lpObj);
void gObjCharZeroSet(int aIndex);
int gObjGetSocket(SOCKET socket);
int gObjGetHWIDUseCount(LPSTR HWID);
void gObjSetTradeOption(int aIndex, int option);
bool IsDuelEnable(int aIndex);
bool IsOnDuel(int aIndex1, int aIndex2);
void gObjSetDuelOption(int aIndex, int option);
int GetMapMoveLevel(CGameObject* lpObj, int mapnumber, int max_over);
void DbItemSetInByte(CGameObject* lpObj, struct SDHP_DBCHAR_INFORESULT* lpMsg, bool* bAllItemExist);
void gObjSetBP(int aIndex);
bool gObjSetCharacter(unsigned char* lpdata, int aIndex);
int gObjCanItemTouch(CGameObject* lpObj, int type);
void gObjMagicTextSave(CGameObject* lpObj);
void ItemIsBufExOption(unsigned char* buf, class CItem* lpItem);
void gObjStatTextSave(CGameObject* lpObj);
void gObjItemTextSave(CGameObject* lpObj);
void gObjWarehouseTextSave(CGameObject* lpObj);
void gObjAuthorityCodeSet(CGameObject* lpObj);
int gObjSetPosMonster(int aIndex, int PosTableNum);
int gObjSetMonster(int aIndex, int MonsterClass);
int gObjGetSocket(SOCKET socket);
int GetMapMoveLevel(CGameObject* lpObj, int mapnumber, int max_over);
void ItemIsBufExOption(unsigned char* buf, class CItem* lpItem);
short gObjAddSearch(SOCKET aSocket, char* ip);
short gObjAdd(SOCKET aSocket, char* ip, int aIndex);
short gObjMonsterRecall(int iMapNumber);
short gObjAddMonster(int iMapNumber);
short gObjAddCallMon();
void gObjUserKill(int aIndex);
void gObjAllLogOut();
void gObjAllDisconnect();
void gObjTradeSave(CGameObject* lpObj, int index);
void gObjBillRequest(CGameObject* lpObj);
short gObjMemFree(int index);
int gObjGameClose(int aIndex);
short gObjDel(int index);
short gObjSometimeClose(int index);
int gObjIsGamePlaing(CGameObject* lpObj);
int gObjIsConnectedGP(int aIndex, char* CharName);
int gObjIsConnectedGP(int aIndex);
int gObjIsConnected(CGameObject* lpObj, int dbnumber);
int gObjIsConnected(int aIndex);
bool gObjIsAccountValid(int aIndex, char* account);
int gObjIsConnected(CGameObject* lpObj);
int gObjIsConnectedEx(int aIndex);
int gObjIsAccontConnect(int aIndex, char* accountid);
int gObjPasswordCheck(int aIndex, char* szInPassword);
int gObjCheckXYMapTile(CGameObject* lpObj, int iDbgName);
int gObjSetAccountLogin(int aIndex, char* szId, int aUserNumber, int aDBNumber, char* Password);
int gObjGetUserNumber(int aIndex);
int gObjGetNumber(int aIndex, int& UN, int& DBN);
LPSTR gObjGetAccountId(int aIndex);
int gObjGetIndex(char* szId);
int gObjUserIdConnectCheck(char* szId, int index);
unsigned char GetPathPacketDirPos(int px, int py);
int gObjCalDistance(CGameObject* lpObj1, CGameObject* lpObj2);
int gObjPositionCheck(CGameObject* lpObj);
int gObjCheckTileArea(int aIndex, int x, int y, int dis);
int ExtentCheck(int x, int y, int w, int h);
BOOL CheckOutOfInventory(int aIndex, int sy, int height);	//-> 1.01.00
BOOL InventoryExtentCheck(int x, int y, int w, int h);		//-> 1.01.00
BOOL CheckOutOfWarehouse(int aIndex, int sy, int height);	//-> 1.01.00
BOOL WarehouseExtentCheck(int x, int y, int w, int h);		//-> 1.01.00
void gObjSetInventory1Pointer(CGameObject* lpObj);
void gObjSetInventory2Pointer(CGameObject* lpObj);
void gObjAddMsgSend(CGameObject* lpObj, int aMsgCode, int aIndex, int SubCode);
void gObjAddMsgSendDelay(CGameObject* lpObj, int aMsgCode, int aIndex, int delay, int SubCode);
void gObjAddMsgSendDelayInSpecificQPos(CGameObject* lpObj, int aMsgCode, int aIndex, int delay, int SubCode, int iQPosition);
void gObjAddAttackProcMsgSendDelay(CGameObject* lpObj, int aMsgCode, int aIndex, int delay, int SubCode, int SubCode2);
void gObjMsgProc(CGameObject* lpObj);
void gObjStateProc(CGameObject* lpObj, int aMsgCode, int aIndex, int SubCode);
void gObjStateAttackProc(CGameObject* lpObj, int aMsgCode, int aIndex, int SubCode, int SubCode2);
int gObjBackSpring(CGameObject* lpObj, CGameObject* lpTargetObj);
int BackSpringCheck(int& x, int& y, int& dir, unsigned char map);
int gObjBackSpring2(CGameObject* lpObj, CGameObject* lpTargetObj, int count);
bool gObjLevelUp(CGameObject* lpObj, UINT64 addexp, int iMonsterType, const char * szEventType);
int gObjLevelUpPointAdd(unsigned char type, CGameObject* lpObj, int aIndex);
void gObjGiveItemSearch(CGameObject* lpObj, int maxlevel);
void gObjGiveItemWarehouseSearch(CGameObject* lpObj, int maxlevel);
int gObjGuildMasterCapacityTest(CGameObject* lpObj);
void gObjNextExpCal(CGameObject* lpObj);
int retResistance(CGameObject* lpObj, int Resistance_Type);
int retCalcSkillResistance(CGameObject* lpTargetObj, int isDouble);
int gObjAttackQ(CGameObject* lpObj);
void gObjPlayerKiller(CGameObject* lpObj, CGameObject* lpTargetObj, int MSBDamage);
void gObjUserDie(CGameObject* lpObj, CGameObject* lpTargetObj);
void gObjInterfaceTimeCheck(CGameObject* lpObj);
void gObjPkDownTimeCheck(CGameObject* lpObj, int TargetLevel);
int gObjAngelSprite(CGameObject* lpObj);
int gObjDemonSprite(CGameObject* lpObj);
int gObjSatanSprite(CGameObject* lpObj);
int gObjSafeGuardSprite(CGameObject* lpObj);
int gObjFindInventoryEquipment(int aIndex);
int gObjSetInventoryEquipment(CGameObject* lpObj, unsigned char btPos);
int gObjInventoryEquipment(CGameObject* lpObj);
int gObjWingSprite(CGameObject* lpObj);
int gObjUniriaSprite(CGameObject* lpObj);
void gObjSpriteDamage(CGameObject* lpObj, int damage);
void gObjSecondDurDown(CGameObject* lpObj);
void gObjChangeDurProc(CGameObject* lpObj);
void gObjWingDurProc(CGameObject* lpObj);
void gObjPenaltyDurDown(CGameObject* lpObj, CGameObject* lpTargetObj);
void gObjWeaponDurDown(CGameObject* lpObj, CGameObject* lpTargetObj, int type);
void gObjArmorRandomDurDown(CGameObject* lpObj, CGameObject* lpAttackObj);
bool gObjIsSelfDefense(CGameObject* lpObj, int aTargetIndex);
void gObjCheckSelfDefense(CGameObject* lpObj, int aTargetIndex);
void gObjTimeCheckSelfDefense(CGameObject* lpObj);
int gObjAttack(CGameObject* lpObj, CGameObject* lpTargetObj, class CMagicInf* lpMagic, int magicsend, unsigned char MSBFlag, int AttackDamage, BOOL bCombo, BYTE RFAttack, BYTE byReflect, BYTE byPentagramAttack = TRUE);
void gObjMonsterExpDivision(CGameObject* lpMonObj, CGameObject* lpObj, int AttackDamage, int MSBFlag);
void gObjMonsterExpDivisionRenewal(CGameObject* lpMonObj, CGameObject* lpObj, int AttackDamage, int MSBFlag);
UINT64 gObjMonsterExpSingle(CGameObject* lpObj, CGameObject* lpTargetObj, int dmg, int tot_dmg, bool& bSendExp, UINT64& nDropZen);
UINT64 gObjMonsterExpSingleRenewal(CGameObject* lpObj, CGameObject* lpTargetObj, int dmg, int tot_dmg, bool &bSendExp);
void gObjExpParty(CGameObject* lpObj, CGameObject* lpTargetObj, int AttackDamage, int MSBFlag);
UINT64 gObjExpPartyRenewal(int nPartyNumber, int nLastAttackUserIndex, CGameObject* lpTargetObj, int AttackDamage, int nTotalDamage, int MSBFlag);
void gObjMonsterDieLifePlus(CGameObject* lpObj, CGameObject* lpTartObj);
void gObjLifeCheck(CGameObject* lpTargetObj, CGameObject* lpObj, int AttackDamage, int DamageSendType, int MSBFlag, int MSBDamage, unsigned short Skill, int iShieldDamage, int iElementalDamage);
int gObjInventoryTrans(int aIndex);
int gObjInventoryCommit(int aIndex);
int gObjInventoryRollback(int aIndex);
void gObjInventoryItemSet(int aIndex, int itempos, unsigned char set_byte);
void gObjInventoryItemBoxSet(int aIndex, int itempos, int xl, int yl, unsigned char set_byte);
bool gObjFixInventoryPointer(int aIndex);
BYTE gObjInventoryDeleteItem(int aIndex, int itempos);
BYTE gObjWarehouseDeleteItem(int aIndex, int itempos);
BYTE gObjChaosBoxDeleteItem(int aIndex, int itempos);
unsigned char gObjInventoryInsertItem(CGameObject* lpObj, int type, int index, int level, int iSerial, int iDur);
DWORD gGetItemNumber();
void gPlusItemNumber();
unsigned char gObjInventoryInsertItem(CGameObject* lpObj, int type, int index, int level, int iSerial, int iDur);
unsigned char gObjOnlyInventoryInsertItem(int aIndex, class CItem item);
unsigned char gObjInventoryInsertItem(CGameObject* lpObj, int type, int index, int level);
int gObjSearchItem(CGameObject* lpObj, int item_type, int add_dur, int nLevel);
int gObjSearchItemMinus(CGameObject* lpObj, int pos, int m_dur);
unsigned char gObjShopBuyInventoryInsertItem(int aIndex, class CItem item);
unsigned char gObjShopBuyMuunInventoryInsertItem(int aIndex, class CItem item);
unsigned char gObjShopBuyEventInventoryInsertItem(int aIndex, class CItem item);
unsigned char gObjInventoryInsertItemTemp(CGameObject* lpObj, class CMapItem* Item);
unsigned char gObjInventoryInsertItem(int aIndex, class CMapItem* item);
unsigned char gObjInventoryInsertItem(int aIndex, class CItem item);
unsigned char gObjMonsterInventoryInsertItem(CGameObject* lpObj, int type, int index, int level, int op1, int op2, int op3);
unsigned char gObjInventoryRectCheck(int aIndex, int sx, int sy, int width, int height);
unsigned char gObjOnlyInventoryRectCheck(int aIndex, int sx, int sy, int width, int height);
int CheckInventoryEmptySpace(CGameObject* lpObj, int iItemHeight, int iItemWidth);
int gObjIsItemPut(CGameObject* lpObj, class CItem* lpItem, int pos);
unsigned char gObjWerehouseRectCheck(int aIndex, int sx, int sy, int width, int height);
unsigned char gObjMapRectCheck(unsigned char* lpMapBuf, int sx, int sy, int ex, int ey, int width, int height);
void gObjWarehouseItemBoxSet(int aIndex, int itempos, int xl, int yl, unsigned char set_byte);
void gObjWarehouseItemSet(int aIndex, int itempos, unsigned char set_byte);
void gObjChaosItemBoxSet(int aIndex, int itempos, int xl, int yl, unsigned char set_byte);
void gObjChaosItemSet(int aIndex, int itempos, unsigned char set_byte);
unsigned char gObjChaosBoxInsertItemPos(int aIndex, class CItem item, int pos, int source);
unsigned char gObjWarehouseInsertItemPos(int aIndex, class CItem item, int pos, int source);
unsigned char gObjInventoryInsertItemPos(int aIndex, class CItem item, int pos, int RequestCheck);
int gObjInventorySearchSerialNumber(CGameObject* lpObj, UINT64 serial);
int gObjWarehouseSearchSerialNumber(CGameObject* lpObj, UINT64 sirial);
unsigned char gObjInventoryMoveItem(int aIndex, unsigned char source, unsigned char target, int& durSsend, int& durTsend, unsigned char sFlag, unsigned char tFlag, unsigned char* siteminfo);
unsigned char gObjTradeRectCheck(int aIndex, int sx, int sy, int width, int height);
int gObjTradeItemBoxSet(int aIndex, int itempos, int xl, int yl, unsigned char set_byte);
unsigned char gObjTradeInventoryMove(CGameObject* lpObj, unsigned char source, unsigned char target);
unsigned char gObjInventoryTradeMove(CGameObject* lpObj, unsigned char source, unsigned char target);
unsigned char gObjTradeTradeMove(CGameObject* lpObj, unsigned char source, unsigned char target);
void gObjTradeCancel(int aIndex);
void gObjTempInventoryItemBoxSet(unsigned char* TempMap, int itempos, int xl, int yl, unsigned char set_byte);
unsigned char gObjTempInventoryRectCheck(int aIndex, unsigned char* TempMap, int sx, int sy, int width, int height);
unsigned char gObjTempInventoryInsertItem(CGameObject* lpObj, class CItem item, unsigned char* TempMap);
int TradeItemInventoryPutTest(int aIndex);
int TradeitemInventoryPut(int aIndex);
void gObjTradeOkButton(int aIndex);
unsigned char LevelSmallConvert(int level);
unsigned char LevelSmallConvert(int aIndex, int inventoryindex);
void gObjAttackDamageCalc(int aIndex);
void gObjMakePreviewCharSet(int aIndex);
void gObjViewportPaint(HWND hWnd);
void InitFrustrum();
void InitFrustrumEx(); // 1.01.10B GS KOR, changed values
void CreateFrustrum(int x, int y, int aIndex);
bool TestFrustrum2(int x, int y, int aIndex);
int gObjCheckViewport(int aIndex, int x, int y);
void gObjViewportClose(CGameObject* lpObj);
void gObjViewportListCreate(short aIndex);
int ViewportAdd(int aIndex, int aAddIndex, int aType);
int ViewportAdd2(int aIndex, int aAddIndex, int aType);
void ViewportDel(short aIndex, int aDelIndex);
void Viewport2Del(short aIndex, int aDelIndex);
void gObjViewportAllDel(short aIndex);
void gObjViewportListDestroy(short aIndex);;
void gObjStateSetCreate(int aIndex);
void gObjSecondProc();
void gObjManaPotionFill(CGameObject* lpObj);
void gObjRestPotionFill(CGameObject* lpObj);
void gObjUseDrink(CGameObject* lpObj, int level);
void gObjViewportListProtocolDestroy(CGameObject* lpObj);
void gObjViewportListProtocolCreate(CGameObject* lpObj);
void gObjViewportListProtocol(short aIndex);
void gObjTeleportMagicUse(int aIndex, unsigned char x, unsigned char y);
int gObjMoveGate(int aIndex, int gt);
void gObjTeleport(int aIndex, int map, int x, int y);
void gObjMoveDataLoadingOK(int aIndex);
class CMagicInf* gObjGetMagic(CGameObject* lpObj, int mIndex);
class CMagicInf* gObjGetMagicSearch(CGameObject* lpObj, unsigned short skillnumber);
int gObjMagicManaUse(CGameObject* lpObj, class CMagicInf* lpMagic);
int gObjMagicBPUse(CGameObject* lpObj, class CMagicInf* lpMagic);
void gObjMagicAddEnergyCheckOnOff(int flag);
int gObjMagicAdd(CGameObject* lpObj, unsigned short aSkill, unsigned char Level);
int gObjMagicDel(CGameObject* lpObj, unsigned short aSkill, unsigned char Level);
int gObjMagicAdd(CGameObject* lpObj, unsigned short Type, unsigned short Index, unsigned char Level, unsigned short& SkillNumber);
int gObjWeaponMagicAdd(CGameObject* lpObj, unsigned short aSkill, BYTE Level);
int gObjMonsterMagicAdd(CGameObject* lpObj, unsigned short aSkill, BYTE Level);
int gObjMagicEnergyCheck(CGameObject* lpObj, unsigned short aSkill);
int gObjSpecialItemLevelUp(CGameObject* lpObj, int source, int target);
int gObjSpecialItemRepair(CGameObject* lpObj, int source, int target);
int gObjItemLevelUp(CGameObject* lpObj, int source, int target);
int gObjItemRandomLevelUp(CGameObject* lpObj, int source, int target);
int gObjItemRandomOption3Up(CGameObject* lpObj, int source, int target);
void gObjAbilityReSet(CGameObject* lpObj);
int gObjTargetGuildWarCheck(CGameObject* lpObj, CGameObject* lpTargetObj);
void gObjGuildWarEndSend(struct GUILD_INFO_STRUCT* lpGuild1, struct GUILD_INFO_STRUCT* lpGuild2, unsigned char Result1, unsigned char Result2);
void gObjGuildWarEndSend(CGameObject* lpObj, unsigned char Result1, unsigned char Result2);
void gObjGuildWarEnd(struct GUILD_INFO_STRUCT* lpGuild, struct GUILD_INFO_STRUCT* lpTargetGuild);
int gObjGuildWarProc(struct GUILD_INFO_STRUCT* lpGuild1, struct GUILD_INFO_STRUCT* lpGuild2, int score);
int gObjGuildWarCheck(CGameObject* lpObj, CGameObject* lpTargetObj);
int gObjGuildWarMasterClose(CGameObject* lpObj);
int gObjGuildWarItemGive(struct GUILD_INFO_STRUCT* lpWinGuild, struct GUILD_INFO_STRUCT* lpLoseGuild);
int gObjGetPkTime(CGameObject* lpObj, int& hour, int& min);
int gObjMonsterCall(int aIndex, int MonsterType, int x, int y);
void gObjMonsterCallKill(int aIndex);
bool gObjCheckMoveArea(int aIndex, int X, int Y);
int gObjCheckTeleportArea(int aIndex, unsigned char x, unsigned char y);
int gObjCheckAttackAreaUsedPath(int aIndex, int TarObjIndex);
int gObjCheckattackAreaUsedViewPort(int aIndex, int TarObjIndex);
int gObjCheckAttackArea(int aIndex, int TarObjIndex);
int gUserFindDevilSquareInvitation(int aIndex);
int gUserFindDevilSquareKeyEyes(int aIndex);
void gObjSendUserStatistic(int aIndex, int startLevel, int endLevel);
CGameObject* gObjFind(char* targetcharname);
int gObjFind10EventChip(int aIndex);
int gObjDelete10EventChip(int aIndex);
void gObjSetPosition(int aIndex, int x, int y);
int gObjGetItemCountInEquipment(int aIndex, int itemtype, int itemindex, int itemlevel);
int gObjGetItemCountInIventory(int aIndex, int itemnum);
int gObjGetItemCountInIventory(int aIndex, int itemtype, int itemindex, int itemlevel);
int gObjGetManaItemPos(int aIndex);
void gObjDelteItemCountInInventory(int aIndex, int itemtype, int itemindex, int count);
void gObjGetStatPointState(int aIndex, short& AddPoint, short& MaxAddPoint, short& MinusPoint, short& MaxMinusPoint);
int gObjCheckStatPointUp(int aIndex);
int gObjCheckStatPointDown(int aIndex);
void gObjUseCircle(int aIndex, int pos);
void gObjUsePlusStatFruit(int aIndex, int pos);
void gObjUseMinusStatFruit(int aIndex, int pos);
void CashShopExMinusStatFruit(int aIndex, int pos);
void gObjCalcMaxLifePower(int aIndex);
void gObjDelayLifeCheck(int aIndex);
int gObjDuelCheck(CGameObject* lpObj);
int gObjDuelCheck(CGameObject* lpObj, CGameObject* lpTargetObj);
void gObjResetDuel(CGameObject* lpObj);
void SkillFrustrum(unsigned char bangle, int aIndex);
int SkillTestFrustrum(int x, int y, int aIndex);
int gObjCheckMaxZen(int aIndex, int nAddZen);
void MakeRandomSetItem(int aIndex);
void MakeRandomSetItem(int aIndex, _stGremoryCaseItem & stItem);
void MakeRewardSetItem(int aIndex, BYTE cDropX, BYTE cDropY, int iRewardType, int iMapnumber);
void MakeRewardSetItem(int aIndex, BYTE cDropX, BYTE cDropY, int iRewardType, int iMapnumber, _stGremoryCaseItem & stItem);
void gObjRecall(int aIndex, int mapnumber, int x, int y);
void gObjSetExpPetItem(int aIndex, UINT64 exp);
int gObjGetRandomItemDropLocation(int iMapNumber, BYTE& cX, BYTE& cY, int iRangeX, int iRangeY, int iLoopCount);
int gObjGetRandomFreeLocation(int iMapNumber, BYTE& cX, BYTE& cY, int iRangeX, int iRangeY, int iLoopCount);
int gObjCheckAttackTypeMagic(int iClass, int iSkill);
int gObjGetGuildUnionNumber(CGameObject* lpObj);
void gObjGetGuildUnionName(CGameObject* lpObj, char* szUnionName, int iUnionNameLen);
int gObjCheckRival(CGameObject* lpObj, CGameObject* lpTargetObj);
int gObjGetRelationShip(CGameObject* lpObj, CGameObject* lpTargetObj);
void gObjNotifyUpdateUnionV1(CGameObject* lpObj);
void gObjNotifyUpdateUnionV2(CGameObject* lpObj);
void gObjUnionUpdateProc(int aIndex);
void gObjSetKillCount(int aIndex, int iOption);
void gObjNotifyUseWeaponV1(CGameObject* lpOwnerObj, CGameObject* lpWeaponObj, int iTargetX, int iTargetY);
void gObjNotifyUseWeaponDamage(CGameObject* lpWeaponObj, int iTargetX, int iTargetY);
void gObjUseBlessAndSoulPotion(int aIndex, int iItemLevel);
void gObjWeaponDurDownInCastle(CGameObject* lpObj, CGameObject* lpTargetObj, int iDecValue);
void gObjReady4Relife(CGameObject* lpObj);
void gObjCheckTimeOutValue(CGameObject* lpObj, DWORD& rNowTick);
void MsgOutput(int aIndex, char* msg, ...);
void gProcessAutoRecuperation(CGameObject* lpObj);
void gObjShieldAutoRefill(CGameObject* lpObj);
int gObjCheckOverlapItemUsingDur(int iUserIndex, int iMaxOverlapped, int iItemType, int iItemLevel);
int gObjOverlapItemUsingDur(class CItem* lpItem, int iMapNumber, int iItemNumber, int iUserIndex, int iMaxOverlapped, int iItemType, int iItemLevel);
int gObjCheckOverlapEventItemUsingDur(int iUserIndex, int iMaxOverlapped, int iItemType, int iItemLevel);
int gObjOverlapEventItemUsingDur(class CItem* lpItem, int iMapNumber, int iItemNumber, int iUserIndex, int iMaxOverlapped, int iItemType, int iItemLevel);
int gObjCheckSerial0ItemList(class CItem* lpItem);
int gObjCheckInventorySerial0Item(CGameObject* lpObj);
BOOL gCheckSkillDistance(int aIndex, int aTargetIndex, int iSkillNum);
void gObjSaveChaosBoxItemList(CGameObject* lpObj);
void gObjQuestMonsterManagement(CGameObject* lpObj, CGameObject* lpTargetObj);
BYTE gObjOnlyInventory1RectCheck(int aIndex, int sx, int sy, int width, int height);
BYTE gObjOnlyInventory2RectCheck(int aIndex, int sx, int sy, int width, int height);
void gObjReqMapSvrAuth(CGameObject* lpObj);
BOOL gObjGetRandomFreeArea(int iMapNumber, BYTE &cX, BYTE &cY, int iSX, int iSY, int iDX, int iDY, int iLoopCount);
void gObjDeleteBokBlessEtc(CGameObject* lpObj);
BOOL gObjItemLevelDown(CGameObject* lpObj, int source, int target);
BOOL gObjItemExcessAdd(CGameObject* lpObj, int source, int target);
BOOL gObjItemDoubleUp(CGameObject* lpObj, int source, int target);
BOOL gObjItemRandomDoubleLevelUp(CGameObject* lpObj, int source, int target);
BOOL gObjItemKondarAdd(CGameObject* lpObj, int source, int target);
BOOL gObjItemRandomOptionNew3Up(CGameObject* lpObj, int source, int target);
BOOL gObjItemKundumAdd(CGameObject* lpObj, int source, int target);
BOOL gObjItemBalanceAdd(CGameObject* lpObj, int source, int target);
BOOL gObjItemScienceAdd(CGameObject* lpObj, int source, int target);
BOOL gObjItemLuckAdd(CGameObject* lpObj, int source, int target);
BOOL gObjItemSpeedAdd(CGameObject* lpObj, int source, int target);
int gObjCalcHPPercent(double Life, double MaxLife);
bool CheckAuthorityCondition(int AuthorityCode, CGameObject* lpObj);
void GetBundleCount(int count, int div, int& itemcount, int& left);
int gObjGetJewelCountInInventory(int aIndex, BYTE type);
int gGetPartyMaxLevel(int nPartyNumber);
int gGetLowHPMonster(int nZoneIndex, int nIndex, int nDistance);
int gObjGamblingInventoryCheck(int aIndex, int iWidth, int iHeight);
void gObjAddSpecificSkillsForSiege(CGameObject* lpObj);
void gObjPentagramMixBoxSet(int aIndex, int itempos, int xl, int yl, unsigned char set_byte);
void gObjPentagramMixItemSet(int aIndex, int itempos, unsigned char set_byte);
unsigned char gObjPentagramMixBoxInsertItemPos(int aIndex, CItem item, int pos, int source);
unsigned char gObjPentagramMixBoxInsertItem(int aIndex, CItem item);
unsigned char gObjPentagramMixBoxRectCheck(int aIndex, int sx, int sy, int width, int height);
unsigned char gObjPentagramMixBoxDeleteItem(int aIndex, int itempos);
int gTransPentagramJewelInfoTest(int aIndex, int targetIndex, CItem sourceItem);
int gTransPentagramJewelInfo(int aIndex, BYTE madeItemPos, int targetIndex, CItem sourceItem, int *nJewelCount);
void gObjAutoPartySet(CGameObject* lpObj /* master */, CGameObject* lpTargetObj /*requestor*/);
BYTE gObjMuunInventoryInsertItemPos(int aIndex, CItem item, int pos);
bool gObjFixMuunInventoryPointer(int aIndex);
void gObjSetMuunInventory1Pointer(CGameObject *lpObj);
void gObjSetMuunInventory2Pointer(CGameObject *lpObj);
BYTE gObjMuunInvenMove(CGameObject *lpObj, int *durSsend, int *durTsend, BYTE source, BYTE target, BYTE *siteminfo);
BYTE gObjChkMuunInventoryEmpty(CGameObject *lpObj);
BYTE gObjMuunInventoryInsertItem(int aIndex, CItem item);
BYTE gObjMuunInventoryInsertItem(int aIndex, CMapItem *item);
BYTE gObjMuunInventoryDeleteItem(int aIndex, int itempos);
void gObjEventInventoryItemSet(int aIndex, int itempos, BYTE set_byte);
void gObjEventInventoryItemBoxSet(int aIndex, int itempos, int xl, int yl, BYTE set_byte);
bool gObjFixEventInventoryPointer(int aIndex);
bool gObjEventInventoryDeleteItem(int aIndex, int itempos);
BYTE gObjEventInventoryInsertItemTemp(CGameObject* lpObj, CMapItem * Item);
BYTE gObjEventInventoryInsertItem(int aIndex, CMapItem * item);
BYTE gObjEventInventoryInsertItem(int aIndex, CItem item);
BYTE gObjEventInvenItemOverlap(CGameObject* lpObj, int *durSsend, int *durTsend, BYTE source, BYTE target);
BYTE gObjEventInvenMove(CGameObject* lpObj, int *durSsend, int *durTsend, BYTE source, BYTE target);
BYTE gObjEventInventoryTradeMove(CGameObject* lpObj, BYTE source, BYTE target);
BYTE gObjTradeEventInventoryMove(CGameObject* lpObj, BYTE source, BYTE target);
void gObjTempEventInventoryItemBoxSet(BYTE * TempMap, int itempos, int xl, int yl, BYTE set_byte);
BYTE gObjTempEventInventoryRectCheck(int aIndex, BYTE * TempMap, int sx, int sy, int width, int height);
BYTE gObjTempEventInventoryInsertItem(CGameObject* lpObj, CItem item, BYTE * TempMap);
int CheckEventInventoryEmptySpace(CGameObject* lpObj, int iItemHeight, int iItemWidth);
int IsEventItem(CItem item);
int IsEventItem(int iType);
BYTE gObjEventInventoryRectCheck(int aIndex, int sx, int sy, int width, int height);
BYTE gObjEventInventoryInsertItemPos(int aIndex, CItem item, int pos, BOOL RequestCheck);
int gObjEventInventorySearchSerialNum(CGameObject* lpObj, UINT64 serial);
void gObjSetEventInventory1Pointer(CGameObject* lpObj);
void gObjSetEventInventory2Pointer(CGameObject* lpObj);
WING_TYPE GetWingType(WORD type, WING_CHECK_FLAG eFlag);
int UseBundleOfBlessJewel(CGameObject* lpObj, int source, int target);
int IsExceptionJewelOfBlessInchant(CGameObject* lpObj, int source, int target);
int IsNotApplyJewelToItems(WORD sItemType);
int IsTransformCharacterSkin(int pChange);
int gCountBlessSoulChaosJewel(int aIndex, short & sBlessJewelCount, short & s10BlessJewelCount, short & s20BlessJewelCount, short & s30BlessJewelCount, short & sSoulJewelCount, short & s10SoulJewelCount, short & s20SoulJewelCount, short & s30SoulJewelCount, short & sChaosJewelCount, short & s10ChaosJewelCount, short & s20ChaosJewelCount, short & s30ChaosJewelCount);
int gJewelBuyItemValueTest(int aBuyerIndex, int aSellerIndex, short sBlessJewelPrice, short sSoulJewelPrice, short sChaosJewelPrice, short sBlessJewelCount, short s10BlessJewelCount, short s20BlessJewelCount, short s30BlessJewelCount, short sSoulJewelCount, short s10SoulJewelCount, short s20SoulJewelCount, short s30SoulJewelCount, short sChaosJewelCount, short s10ChaosJewelCount, short s20ChaosJewelCount, short s30ChaosJewelCount, short &sBlessJewelNeedCount, short &s10BlessJewelNeedCount, short &s20BlessJewelNeedCount, short &s30BlessJewelNeedCount, short &sSoulJewelNeedCount, short &s10SoulJewelNeedCount, short &s20SoulJewelNeedCount, short &s30SoulJewelNeedCount, short &sChaosJewelNeedCount, short &s10ChaosJewelNeedCount, short &s20ChaosJewelNeedCount, short &s30ChaosJewelNeedCount);
int gJewelInventoryPutTest(int aBuyerIndex, int aSellerIndex, short sBlessJewelPrice, short sSoulJewelPrice, short sChaosJewelPrice);
int gJewelInventoryPut(int aBuyerIndex, int aSellerIndex, short sBlessJewelPrice, short sSoulJewelPrice, short sChaosJewelPrice, short sBlessJewelNeedCount, short s10BlessJewelNeedCount, short s20BlessJewelNeedCount, short s30BlessJewelNeedCount, short sSoulJewelNeedCount, short s10SoulJewelNeedCount, short s20SoulJewelNeedCount, short s30SoulJewelNeedCount, short sChaosJewelNeedCount, short s10ChaosJewelNeedCount, short s20ChaosJewelNeedCount, short s30ChaosJewelNeedCount);
int CheckInventoryEmptySpaceCount(CGameObject* lpObj, int iItemHeight, int iItemWidth);
BOOL SummonGoldColossusMonster(CGameObject* lpObj, int monsterIndex, int nCount, int bIsHelpMon);
BOOL SummonPetEventMonster(CGameObject* lpObj);
BOOL NewYearSummonMonster(CGameObject* lpObj, int monsterIndex);
int gObjGetAutoPartyUserCount();
int gObjGetOffTradeUsercount();
void gObjDisconnectOffTraders();
void gObjDisconnectOffLevelers();
void gObjInvenPetDamage(CGameObject* lpObj, int damage);
BOOL gObjUseInvenPetCheck(CGameObject* lpObj, CItem *lpItem, int flag);
BOOL IsInvenPet(WORD sIndex);
BOOL IsInvenItem(WORD sIndex);
int gObjCalDistanceTX(CGameObject* lpObj1, CGameObject* lpObj2);
void Check_SameSerialItem(int aIndex, BYTE bCase, bool & bCheckFail);
bool gObjChaosBoxPutItemTest(int aIndex, CItem Item, BYTE btCount);
BYTE gObjChaosBoxInsertItemTemp(CGameObject* lpObj, CItem * Item);
BOOL gObjUnicornSprite(CGameObject* lpObj);
void gObjUseRecoveryPotion(CGameObject* lpObj, int pos, double value);
void gObjMuBotPayForUse(CGameObject* lpObj);
void gObjMuBotProc(CGameObject* lpObj);

#endif